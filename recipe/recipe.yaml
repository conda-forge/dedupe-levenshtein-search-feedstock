context:
  name: dedupe-levenshtein-search
  version: "1.4.5"

package:
  name: ${{ name }}
  version: ${{ version }}

source:
  url: https://files.pythonhosted.org/packages/b7/d0/1c97909871021517f55f63bc7db2fe1bd0febf5472e015d94f934efc6998/dedupe_Levenshtein_search-${{ version }}.tar.gz
  sha256: 11f9cf17bade458d04f8a62470050920545c1614a792d786c7ca462a4ff5224a

build:
  script: python -m pip install . -vv
  number: 0

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compiler names include 'c', 'cxx' and 'fortran', among others.
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    - ${{ stdlib('c') }}  # If you need any compiler, add the C standard library ("stdlib") too
  host:
    - python
    - pip
    - setuptools
  run:
    - python

tests:
  - python:
      imports:
      - Levenshtein_search
      pip_check: true

about:
  homepage: https://github.com/dedupeio/Levenshtein_search
  summary: 'Python module to fuzzy search words in documents.'
  description: Levenshtein_search is a Python module that stores any number of documents as ternary search trees. It performs fuzzy searches for words in a document that are d distance away from a query word. Searches can also be used in conjunction with TF-IDF calculations. The term frequency (TF) is computed for each approximately matching word in the document, as well as the Levenshtein distance from your query word. The module was written in C and increases search speed by using graph search algorithms and minimizing the number of redundant comparisons.
  license: MIT
  license_file: LICENSE
  repository: https://github.com/dedupeio/Levenshtein_search

extra:
  recipe-maintainers:
    - EllaBootQC
